cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(543):         for optim_step in range(max_steps):
cw_div.py(545):             adversaries = from_tanh_space(inputs_tanh + pert_tanh)
 --- modulename: cw_div, funcname: from_tanh_space
cw_div.py(668):     _box_mul = (box[1] - box[0]) * 0.5
cw_div.py(669):     _box_plus = (box[1] + box[0]) * 0.5
cw_div.py(670):     return torch.tanh(x) * _box_mul + _box_plus
cw_div.py(546):             pert_outputs = model(adversaries)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(549):             pert_norms = torch.pow(adversaries - inputs, exponent=2)
cw_div.py(550):             pert_norms = torch.sum(pert_norms.view(pert_norms.size(0), -1), 1)
cw_div.py(553):             div_reg = norm_divergence_by_module(data=adversaries, model=model, module=module, device=device, regularizer_weight=regularizer_weight)
 --- modulename: cw_div, funcname: norm_divergence_by_module
cw_div.py(750):     data = torch.clamp(data, 0, 1)
cw_div.py(755):     layer_activations = torch.relu(torch.squeeze(extract_outputs(model=model, data=data, module=module)))
 --- modulename: cw_div, funcname: extract_outputs
cw_div.py(738):     outputs = []
cw_div.py(739):     def hook(module, input, output):
cw_div.py(741):     handle = module.register_forward_hook(hook)
 --- modulename: module, funcname: register_forward_hook
module.py(455):         handle = hooks.RemovableHandle(self._forward_hooks)
 --- modulename: hooks, funcname: __init__
hooks.py(13):         self.hooks_dict_ref = weakref.ref(hooks_dict)
hooks.py(14):         self.id = RemovableHandle.next_id
hooks.py(15):         RemovableHandle.next_id += 1
module.py(456):         self._forward_hooks[handle.id] = hook
module.py(457):         return handle
cw_div.py(742):     model(data)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(495):             hook_result = hook(self, input, result)
 --- modulename: cw_div, funcname: hook
cw_div.py(740):         outputs.append(output)
module.py(496):             if hook_result is not None:
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(743):     handle.remove()
 --- modulename: hooks, funcname: remove
hooks.py(18):         hooks_dict = self.hooks_dict_ref()
hooks.py(19):         if hooks_dict is not None and self.id in hooks_dict:
hooks.py(20):             del hooks_dict[self.id]
cw_div.py(744):     return torch.stack(outputs)
cw_div.py(758):     if len(layer_activations.size()) == 1:
cw_div.py(760):     elif len(layer_activations.size()) == 2:
cw_div.py(764):         out_norm = (layer_activations / torch.sum(layer_activations)) + 1e-20
cw_div.py(767):     uniform_tensor = torch.ones(out_norm.shape).to(device)
cw_div.py(770):     uni_norm = uniform_tensor / torch.sum(uniform_tensor)
cw_div.py(774):     divergence = F.kl_div(input=uni_norm.log(), target=out_norm, reduction='sum')
 --- modulename: functional, funcname: kl_div
functional.py(1988):     if size_average is not None or reduce is not None:
functional.py(1991):         if reduction == 'mean':
functional.py(1997):         if reduction == 'batchmean':
functional.py(2000):             reduction_enum = _Reduction.get_enum(reduction)
 --- modulename: _reduction, funcname: get_enum
_reduction.py(10):     if reduction == 'none':
_reduction.py(12):     elif reduction == 'mean':
_reduction.py(14):     elif reduction == 'elementwise_mean':
_reduction.py(17):     elif reduction == 'sum':
_reduction.py(18):         ret = 2
_reduction.py(22):     return ret
functional.py(2002):     reduced = torch.kl_div(input, target, reduction_enum)
functional.py(2004):     if reduction == 'batchmean' and input.dim() != 0:
functional.py(2007):     return reduced
cw_div.py(777):     if regularizer_weight is None:
cw_div.py(780):     if divergence < 0:
cw_div.py(787):     return regularizer_weight * divergence
cw_div.py(555):             target_activ = torch.sum(targets_oh * pert_outputs, 1)
cw_div.py(556):             maxother_activ = torch.max(((1 - targets_oh) * pert_outputs - targets_oh * 1e4), 1)[0]
 --- modulename: tensor, funcname: __rsub__
tensor.py(371):         return _C._VariableFunctions.rsub(self, other)
cw_div.py(558):             if targeted:
cw_div.py(563):                 f = torch.clamp(target_activ - maxother_activ + confidence, min=0.0)
cw_div.py(565):             cw_loss = torch.sum(scale_consts * f)
cw_div.py(566):             L2_loss = torch.sum(pert_norms)
cw_div.py(568):             batch_loss = cw_loss + L2_loss + div_reg
cw_div.py(571):             optimizer.zero_grad()
 --- modulename: optimizer, funcname: zero_grad
optimizer.py(160):         for group in self.param_groups:
optimizer.py(161):             for p in group['params']:
optimizer.py(162):                 if p.grad is not None:
optimizer.py(163):                     p.grad.detach_()
optimizer.py(164):                     p.grad.zero_()
optimizer.py(161):             for p in group['params']:
optimizer.py(160):         for group in self.param_groups:
cw_div.py(572):             batch_loss.backward()
 --- modulename: tensor, funcname: backward
tensor.py(107):         torch.autograd.backward(self, gradient, retain_graph, create_graph)
 --- modulename: __init__, funcname: backward
__init__.py(69):     if grad_variables is not None:
__init__.py(78):     tensors = (tensors,) if isinstance(tensors, torch.Tensor) else tuple(tensors)
__init__.py(80):     if grad_tensors is None:
__init__.py(81):         grad_tensors = [None] * len(tensors)
__init__.py(87):     grad_tensors = _make_grads(tensors, grad_tensors)
 --- modulename: __init__, funcname: _make_grads
__init__.py(21):     new_grads = []
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(23):         if isinstance(grad, torch.Tensor):
__init__.py(25):         elif grad is None:
__init__.py(26):             if out.requires_grad:
__init__.py(27):                 if out.numel() != 1:
__init__.py(29):                 new_grads.append(torch.ones_like(out))
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(35):     return tuple(new_grads)
__init__.py(88):     if retain_graph is None:
__init__.py(89):         retain_graph = create_graph
__init__.py(91):     Variable._execution_engine.run_backward(
__init__.py(92):         tensors, grad_tensors, retain_graph, create_graph,
__init__.py(93):         allow_unreachable=True)  # allow_unreachable flag
cw_div.py(573):             optimizer.step()
 --- modulename: adam, funcname: step
adam.py(56):         loss = None
adam.py(57):         if closure is not None:
adam.py(60):         for group in self.param_groups:
adam.py(61):             for p in group['params']:
adam.py(62):                 if p.grad is None:
adam.py(64):                 grad = p.grad.data
adam.py(65):                 if grad.is_sparse:
adam.py(67):                 amsgrad = group['amsgrad']
adam.py(69):                 state = self.state[p]
 --- modulename: tensor, funcname: __hash__
tensor.py(439):         return id(self)
adam.py(72):                 if len(state) == 0:
adam.py(82):                 exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']
adam.py(83):                 if amsgrad:
adam.py(85):                 beta1, beta2 = group['betas']
adam.py(87):                 state['step'] += 1
adam.py(89):                 if group['weight_decay'] != 0:
adam.py(93):                 exp_avg.mul_(beta1).add_(1 - beta1, grad)
adam.py(94):                 exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
adam.py(95):                 if amsgrad:
adam.py(101):                     denom = exp_avg_sq.sqrt().add_(group['eps'])
adam.py(103):                 bias_correction1 = 1 - beta1 ** state['step']
adam.py(104):                 bias_correction2 = 1 - beta2 ** state['step']
adam.py(105):                 step_size = group['lr'] * math.sqrt(bias_correction2) / bias_correction1
adam.py(107):                 p.data.addcdiv_(-step_size, exp_avg, denom)
adam.py(61):             for p in group['params']:
adam.py(60):         for group in self.param_groups:
adam.py(109):         return loss
cw_div.py(577):             if optim_step % log_frequency == 0:
cw_div.py(580):             if abort_early and not optim_step % (max_steps // 10):
cw_div.py(588):             pert_predictions = torch.argmax(pert_outputs, dim=1)
cw_div.py(589):             comp_pert_predictions = torch.argmax(compensate_confidence(pert_outputs, targets, targeted, confidence), dim=1)
 --- modulename: cw_div, funcname: compensate_confidence
cw_div.py(686):     outputs_comp = outputs.clone()
cw_div.py(687):     rng = torch.range(start=0, end=targets.shape[0]-1, dtype=torch.long)
cw_div.py(689):     if targeted:
cw_div.py(699):         outputs_comp[rng, targets] += confidence
cw_div.py(700):     return outputs_comp
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(543):         for optim_step in range(max_steps):
cw_div.py(545):             adversaries = from_tanh_space(inputs_tanh + pert_tanh)
 --- modulename: cw_div, funcname: from_tanh_space
cw_div.py(668):     _box_mul = (box[1] - box[0]) * 0.5
cw_div.py(669):     _box_plus = (box[1] + box[0]) * 0.5
cw_div.py(670):     return torch.tanh(x) * _box_mul + _box_plus
cw_div.py(546):             pert_outputs = model(adversaries)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(549):             pert_norms = torch.pow(adversaries - inputs, exponent=2)
cw_div.py(550):             pert_norms = torch.sum(pert_norms.view(pert_norms.size(0), -1), 1)
cw_div.py(553):             div_reg = norm_divergence_by_module(data=adversaries, model=model, module=module, device=device, regularizer_weight=regularizer_weight)
 --- modulename: cw_div, funcname: norm_divergence_by_module
cw_div.py(750):     data = torch.clamp(data, 0, 1)
cw_div.py(755):     layer_activations = torch.relu(torch.squeeze(extract_outputs(model=model, data=data, module=module)))
 --- modulename: cw_div, funcname: extract_outputs
cw_div.py(738):     outputs = []
cw_div.py(739):     def hook(module, input, output):
cw_div.py(741):     handle = module.register_forward_hook(hook)
 --- modulename: module, funcname: register_forward_hook
module.py(455):         handle = hooks.RemovableHandle(self._forward_hooks)
 --- modulename: hooks, funcname: __init__
hooks.py(13):         self.hooks_dict_ref = weakref.ref(hooks_dict)
hooks.py(14):         self.id = RemovableHandle.next_id
hooks.py(15):         RemovableHandle.next_id += 1
module.py(456):         self._forward_hooks[handle.id] = hook
module.py(457):         return handle
cw_div.py(742):     model(data)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(495):             hook_result = hook(self, input, result)
 --- modulename: cw_div, funcname: hook
cw_div.py(740):         outputs.append(output)
module.py(496):             if hook_result is not None:
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(743):     handle.remove()
 --- modulename: hooks, funcname: remove
hooks.py(18):         hooks_dict = self.hooks_dict_ref()
hooks.py(19):         if hooks_dict is not None and self.id in hooks_dict:
hooks.py(20):             del hooks_dict[self.id]
cw_div.py(744):     return torch.stack(outputs)
cw_div.py(758):     if len(layer_activations.size()) == 1:
cw_div.py(760):     elif len(layer_activations.size()) == 2:
cw_div.py(764):         out_norm = (layer_activations / torch.sum(layer_activations)) + 1e-20
cw_div.py(767):     uniform_tensor = torch.ones(out_norm.shape).to(device)
cw_div.py(770):     uni_norm = uniform_tensor / torch.sum(uniform_tensor)
cw_div.py(774):     divergence = F.kl_div(input=uni_norm.log(), target=out_norm, reduction='sum')
 --- modulename: functional, funcname: kl_div
functional.py(1988):     if size_average is not None or reduce is not None:
functional.py(1991):         if reduction == 'mean':
functional.py(1997):         if reduction == 'batchmean':
functional.py(2000):             reduction_enum = _Reduction.get_enum(reduction)
 --- modulename: _reduction, funcname: get_enum
_reduction.py(10):     if reduction == 'none':
_reduction.py(12):     elif reduction == 'mean':
_reduction.py(14):     elif reduction == 'elementwise_mean':
_reduction.py(17):     elif reduction == 'sum':
_reduction.py(18):         ret = 2
_reduction.py(22):     return ret
functional.py(2002):     reduced = torch.kl_div(input, target, reduction_enum)
functional.py(2004):     if reduction == 'batchmean' and input.dim() != 0:
functional.py(2007):     return reduced
cw_div.py(777):     if regularizer_weight is None:
cw_div.py(780):     if divergence < 0:
cw_div.py(787):     return regularizer_weight * divergence
cw_div.py(555):             target_activ = torch.sum(targets_oh * pert_outputs, 1)
cw_div.py(556):             maxother_activ = torch.max(((1 - targets_oh) * pert_outputs - targets_oh * 1e4), 1)[0]
 --- modulename: tensor, funcname: __rsub__
tensor.py(371):         return _C._VariableFunctions.rsub(self, other)
cw_div.py(558):             if targeted:
cw_div.py(563):                 f = torch.clamp(target_activ - maxother_activ + confidence, min=0.0)
cw_div.py(565):             cw_loss = torch.sum(scale_consts * f)
cw_div.py(566):             L2_loss = torch.sum(pert_norms)
cw_div.py(568):             batch_loss = cw_loss + L2_loss + div_reg
cw_div.py(571):             optimizer.zero_grad()
 --- modulename: optimizer, funcname: zero_grad
optimizer.py(160):         for group in self.param_groups:
optimizer.py(161):             for p in group['params']:
optimizer.py(162):                 if p.grad is not None:
optimizer.py(163):                     p.grad.detach_()
optimizer.py(164):                     p.grad.zero_()
optimizer.py(161):             for p in group['params']:
optimizer.py(160):         for group in self.param_groups:
cw_div.py(572):             batch_loss.backward()
 --- modulename: tensor, funcname: backward
tensor.py(107):         torch.autograd.backward(self, gradient, retain_graph, create_graph)
 --- modulename: __init__, funcname: backward
__init__.py(69):     if grad_variables is not None:
__init__.py(78):     tensors = (tensors,) if isinstance(tensors, torch.Tensor) else tuple(tensors)
__init__.py(80):     if grad_tensors is None:
__init__.py(81):         grad_tensors = [None] * len(tensors)
__init__.py(87):     grad_tensors = _make_grads(tensors, grad_tensors)
 --- modulename: __init__, funcname: _make_grads
__init__.py(21):     new_grads = []
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(23):         if isinstance(grad, torch.Tensor):
__init__.py(25):         elif grad is None:
__init__.py(26):             if out.requires_grad:
__init__.py(27):                 if out.numel() != 1:
__init__.py(29):                 new_grads.append(torch.ones_like(out))
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(35):     return tuple(new_grads)
__init__.py(88):     if retain_graph is None:
__init__.py(89):         retain_graph = create_graph
__init__.py(91):     Variable._execution_engine.run_backward(
__init__.py(92):         tensors, grad_tensors, retain_graph, create_graph,
__init__.py(93):         allow_unreachable=True)  # allow_unreachable flag
cw_div.py(573):             optimizer.step()
 --- modulename: adam, funcname: step
adam.py(56):         loss = None
adam.py(57):         if closure is not None:
adam.py(60):         for group in self.param_groups:
adam.py(61):             for p in group['params']:
adam.py(62):                 if p.grad is None:
adam.py(64):                 grad = p.grad.data
adam.py(65):                 if grad.is_sparse:
adam.py(67):                 amsgrad = group['amsgrad']
adam.py(69):                 state = self.state[p]
 --- modulename: tensor, funcname: __hash__
tensor.py(439):         return id(self)
adam.py(72):                 if len(state) == 0:
adam.py(82):                 exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']
adam.py(83):                 if amsgrad:
adam.py(85):                 beta1, beta2 = group['betas']
adam.py(87):                 state['step'] += 1
adam.py(89):                 if group['weight_decay'] != 0:
adam.py(93):                 exp_avg.mul_(beta1).add_(1 - beta1, grad)
adam.py(94):                 exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
adam.py(95):                 if amsgrad:
adam.py(101):                     denom = exp_avg_sq.sqrt().add_(group['eps'])
adam.py(103):                 bias_correction1 = 1 - beta1 ** state['step']
adam.py(104):                 bias_correction2 = 1 - beta2 ** state['step']
adam.py(105):                 step_size = group['lr'] * math.sqrt(bias_correction2) / bias_correction1
adam.py(107):                 p.data.addcdiv_(-step_size, exp_avg, denom)
adam.py(61):             for p in group['params']:
adam.py(60):         for group in self.param_groups:
adam.py(109):         return loss
cw_div.py(577):             if optim_step % log_frequency == 0:
cw_div.py(580):             if abort_early and not optim_step % (max_steps // 10):
cw_div.py(588):             pert_predictions = torch.argmax(pert_outputs, dim=1)
cw_div.py(589):             comp_pert_predictions = torch.argmax(compensate_confidence(pert_outputs, targets, targeted, confidence), dim=1)
 --- modulename: cw_div, funcname: compensate_confidence
cw_div.py(686):     outputs_comp = outputs.clone()
cw_div.py(687):     rng = torch.range(start=0, end=targets.shape[0]-1, dtype=torch.long)
cw_div.py(689):     if targeted:
cw_div.py(699):         outputs_comp[rng, targets] += confidence
cw_div.py(700):     return outputs_comp
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(543):         for optim_step in range(max_steps):
cw_div.py(545):             adversaries = from_tanh_space(inputs_tanh + pert_tanh)
 --- modulename: cw_div, funcname: from_tanh_space
cw_div.py(668):     _box_mul = (box[1] - box[0]) * 0.5
cw_div.py(669):     _box_plus = (box[1] + box[0]) * 0.5
cw_div.py(670):     return torch.tanh(x) * _box_mul + _box_plus
cw_div.py(546):             pert_outputs = model(adversaries)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(549):             pert_norms = torch.pow(adversaries - inputs, exponent=2)
cw_div.py(550):             pert_norms = torch.sum(pert_norms.view(pert_norms.size(0), -1), 1)
cw_div.py(553):             div_reg = norm_divergence_by_module(data=adversaries, model=model, module=module, device=device, regularizer_weight=regularizer_weight)
 --- modulename: cw_div, funcname: norm_divergence_by_module
cw_div.py(750):     data = torch.clamp(data, 0, 1)
cw_div.py(755):     layer_activations = torch.relu(torch.squeeze(extract_outputs(model=model, data=data, module=module)))
 --- modulename: cw_div, funcname: extract_outputs
cw_div.py(738):     outputs = []
cw_div.py(739):     def hook(module, input, output):
cw_div.py(741):     handle = module.register_forward_hook(hook)
 --- modulename: module, funcname: register_forward_hook
module.py(455):         handle = hooks.RemovableHandle(self._forward_hooks)
 --- modulename: hooks, funcname: __init__
hooks.py(13):         self.hooks_dict_ref = weakref.ref(hooks_dict)
hooks.py(14):         self.id = RemovableHandle.next_id
hooks.py(15):         RemovableHandle.next_id += 1
module.py(456):         self._forward_hooks[handle.id] = hook
module.py(457):         return handle
cw_div.py(742):     model(data)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(495):             hook_result = hook(self, input, result)
 --- modulename: cw_div, funcname: hook
cw_div.py(740):         outputs.append(output)
module.py(496):             if hook_result is not None:
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(743):     handle.remove()
 --- modulename: hooks, funcname: remove
hooks.py(18):         hooks_dict = self.hooks_dict_ref()
hooks.py(19):         if hooks_dict is not None and self.id in hooks_dict:
hooks.py(20):             del hooks_dict[self.id]
cw_div.py(744):     return torch.stack(outputs)
cw_div.py(758):     if len(layer_activations.size()) == 1:
cw_div.py(760):     elif len(layer_activations.size()) == 2:
cw_div.py(764):         out_norm = (layer_activations / torch.sum(layer_activations)) + 1e-20
cw_div.py(767):     uniform_tensor = torch.ones(out_norm.shape).to(device)
cw_div.py(770):     uni_norm = uniform_tensor / torch.sum(uniform_tensor)
cw_div.py(774):     divergence = F.kl_div(input=uni_norm.log(), target=out_norm, reduction='sum')
 --- modulename: functional, funcname: kl_div
functional.py(1988):     if size_average is not None or reduce is not None:
functional.py(1991):         if reduction == 'mean':
functional.py(1997):         if reduction == 'batchmean':
functional.py(2000):             reduction_enum = _Reduction.get_enum(reduction)
 --- modulename: _reduction, funcname: get_enum
_reduction.py(10):     if reduction == 'none':
_reduction.py(12):     elif reduction == 'mean':
_reduction.py(14):     elif reduction == 'elementwise_mean':
_reduction.py(17):     elif reduction == 'sum':
_reduction.py(18):         ret = 2
_reduction.py(22):     return ret
functional.py(2002):     reduced = torch.kl_div(input, target, reduction_enum)
functional.py(2004):     if reduction == 'batchmean' and input.dim() != 0:
functional.py(2007):     return reduced
cw_div.py(777):     if regularizer_weight is None:
cw_div.py(780):     if divergence < 0:
cw_div.py(787):     return regularizer_weight * divergence
cw_div.py(555):             target_activ = torch.sum(targets_oh * pert_outputs, 1)
cw_div.py(556):             maxother_activ = torch.max(((1 - targets_oh) * pert_outputs - targets_oh * 1e4), 1)[0]
 --- modulename: tensor, funcname: __rsub__
tensor.py(371):         return _C._VariableFunctions.rsub(self, other)
cw_div.py(558):             if targeted:
cw_div.py(563):                 f = torch.clamp(target_activ - maxother_activ + confidence, min=0.0)
cw_div.py(565):             cw_loss = torch.sum(scale_consts * f)
cw_div.py(566):             L2_loss = torch.sum(pert_norms)
cw_div.py(568):             batch_loss = cw_loss + L2_loss + div_reg
cw_div.py(571):             optimizer.zero_grad()
 --- modulename: optimizer, funcname: zero_grad
optimizer.py(160):         for group in self.param_groups:
optimizer.py(161):             for p in group['params']:
optimizer.py(162):                 if p.grad is not None:
optimizer.py(163):                     p.grad.detach_()
optimizer.py(164):                     p.grad.zero_()
optimizer.py(161):             for p in group['params']:
optimizer.py(160):         for group in self.param_groups:
cw_div.py(572):             batch_loss.backward()
 --- modulename: tensor, funcname: backward
tensor.py(107):         torch.autograd.backward(self, gradient, retain_graph, create_graph)
 --- modulename: __init__, funcname: backward
__init__.py(69):     if grad_variables is not None:
__init__.py(78):     tensors = (tensors,) if isinstance(tensors, torch.Tensor) else tuple(tensors)
__init__.py(80):     if grad_tensors is None:
__init__.py(81):         grad_tensors = [None] * len(tensors)
__init__.py(87):     grad_tensors = _make_grads(tensors, grad_tensors)
 --- modulename: __init__, funcname: _make_grads
__init__.py(21):     new_grads = []
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(23):         if isinstance(grad, torch.Tensor):
__init__.py(25):         elif grad is None:
__init__.py(26):             if out.requires_grad:
__init__.py(27):                 if out.numel() != 1:
__init__.py(29):                 new_grads.append(torch.ones_like(out))
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(35):     return tuple(new_grads)
__init__.py(88):     if retain_graph is None:
__init__.py(89):         retain_graph = create_graph
__init__.py(91):     Variable._execution_engine.run_backward(
__init__.py(92):         tensors, grad_tensors, retain_graph, create_graph,
__init__.py(93):         allow_unreachable=True)  # allow_unreachable flag
cw_div.py(573):             optimizer.step()
 --- modulename: adam, funcname: step
adam.py(56):         loss = None
adam.py(57):         if closure is not None:
adam.py(60):         for group in self.param_groups:
adam.py(61):             for p in group['params']:
adam.py(62):                 if p.grad is None:
adam.py(64):                 grad = p.grad.data
adam.py(65):                 if grad.is_sparse:
adam.py(67):                 amsgrad = group['amsgrad']
adam.py(69):                 state = self.state[p]
 --- modulename: tensor, funcname: __hash__
tensor.py(439):         return id(self)
adam.py(72):                 if len(state) == 0:
adam.py(82):                 exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']
adam.py(83):                 if amsgrad:
adam.py(85):                 beta1, beta2 = group['betas']
adam.py(87):                 state['step'] += 1
adam.py(89):                 if group['weight_decay'] != 0:
adam.py(93):                 exp_avg.mul_(beta1).add_(1 - beta1, grad)
adam.py(94):                 exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
adam.py(95):                 if amsgrad:
adam.py(101):                     denom = exp_avg_sq.sqrt().add_(group['eps'])
adam.py(103):                 bias_correction1 = 1 - beta1 ** state['step']
adam.py(104):                 bias_correction2 = 1 - beta2 ** state['step']
adam.py(105):                 step_size = group['lr'] * math.sqrt(bias_correction2) / bias_correction1
adam.py(107):                 p.data.addcdiv_(-step_size, exp_avg, denom)
adam.py(61):             for p in group['params']:
adam.py(60):         for group in self.param_groups:
adam.py(109):         return loss
cw_div.py(577):             if optim_step % log_frequency == 0:
cw_div.py(580):             if abort_early and not optim_step % (max_steps // 10):
cw_div.py(588):             pert_predictions = torch.argmax(pert_outputs, dim=1)
cw_div.py(589):             comp_pert_predictions = torch.argmax(compensate_confidence(pert_outputs, targets, targeted, confidence), dim=1)
 --- modulename: cw_div, funcname: compensate_confidence
cw_div.py(686):     outputs_comp = outputs.clone()
cw_div.py(687):     rng = torch.range(start=0, end=targets.shape[0]-1, dtype=torch.long)
cw_div.py(689):     if targeted:
cw_div.py(699):         outputs_comp[rng, targets] += confidence
cw_div.py(700):     return outputs_comp
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(543):         for optim_step in range(max_steps):
cw_div.py(545):             adversaries = from_tanh_space(inputs_tanh + pert_tanh)
 --- modulename: cw_div, funcname: from_tanh_space
cw_div.py(668):     _box_mul = (box[1] - box[0]) * 0.5
cw_div.py(669):     _box_plus = (box[1] + box[0]) * 0.5
cw_div.py(670):     return torch.tanh(x) * _box_mul + _box_plus
cw_div.py(546):             pert_outputs = model(adversaries)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(549):             pert_norms = torch.pow(adversaries - inputs, exponent=2)
cw_div.py(550):             pert_norms = torch.sum(pert_norms.view(pert_norms.size(0), -1), 1)
cw_div.py(553):             div_reg = norm_divergence_by_module(data=adversaries, model=model, module=module, device=device, regularizer_weight=regularizer_weight)
 --- modulename: cw_div, funcname: norm_divergence_by_module
cw_div.py(750):     data = torch.clamp(data, 0, 1)
cw_div.py(755):     layer_activations = torch.relu(torch.squeeze(extract_outputs(model=model, data=data, module=module)))
 --- modulename: cw_div, funcname: extract_outputs
cw_div.py(738):     outputs = []
cw_div.py(739):     def hook(module, input, output):
cw_div.py(741):     handle = module.register_forward_hook(hook)
 --- modulename: module, funcname: register_forward_hook
module.py(455):         handle = hooks.RemovableHandle(self._forward_hooks)
 --- modulename: hooks, funcname: __init__
hooks.py(13):         self.hooks_dict_ref = weakref.ref(hooks_dict)
hooks.py(14):         self.id = RemovableHandle.next_id
hooks.py(15):         RemovableHandle.next_id += 1
module.py(456):         self._forward_hooks[handle.id] = hook
module.py(457):         return handle
cw_div.py(742):     model(data)
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: models, funcname: forward
models.py(189):         x = self.conv1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(190):         x = self.relu1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(495):             hook_result = hook(self, input, result)
 --- modulename: cw_div, funcname: hook
cw_div.py(740):         outputs.append(output)
module.py(496):             if hook_result is not None:
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(191):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(192):         x = self.conv2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: conv, funcname: forward
conv.py(331):         if self.padding_mode == 'circular':
conv.py(337):         return F.conv2d(input, self.weight, self.bias, self.stride,
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
conv.py(338):                         self.padding, self.dilation, self.groups)
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(193):         x = self.relu2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(194):         x = F.max_pool2d(x, 2, 2)
 --- modulename: _jit_internal, funcname: fn
_jit_internal.py(124):         dispatch_flag = False
_jit_internal.py(125):         if arg_name in kwargs:
_jit_internal.py(127):         elif arg_index < len(args):
_jit_internal.py(130):         if dispatch_flag:
_jit_internal.py(133):             return if_false(*args, **kwargs)
 --- modulename: functional, funcname: _max_pool2d
functional.py(491):     if stride is None:
functional.py(493):     return torch.max_pool2d(
functional.py(494):         input, kernel_size, stride, padding, dilation, ceil_mode)
models.py(195):         x = x.view(-1, 4 * 4 * 50)
models.py(196):         x = self.fc1(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(197):         x = self.relu3(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: activation, funcname: forward
activation.py(99):         return F.relu(input, inplace=self.inplace)
 --- modulename: functional, funcname: relu
functional.py(940):     if inplace:
functional.py(943):         result = torch.relu(input)
functional.py(944):     return result
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(198):         x = self.fc2(x)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(530):         if '_buffers' in self.__dict__:
module.py(531):             _buffers = self.__dict__['_buffers']
module.py(532):             if name in _buffers:
module.py(534):         if '_modules' in self.__dict__:
module.py(535):             modules = self.__dict__['_modules']
module.py(536):             if name in modules:
module.py(537):                 return modules[name]
 --- modulename: module, funcname: __call__
module.py(488):         for hook in self._forward_pre_hooks.values():
module.py(490):         if torch._C._get_tracing_state():
module.py(493):             result = self.forward(*input, **kwargs)
 --- modulename: linear, funcname: forward
linear.py(92):         return F.linear(input, self.weight, self.bias)
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: module, funcname: __getattr__
module.py(526):         if '_parameters' in self.__dict__:
module.py(527):             _parameters = self.__dict__['_parameters']
module.py(528):             if name in _parameters:
module.py(529):                 return _parameters[name]
 --- modulename: functional, funcname: linear
functional.py(1404):     if input.dim() == 2 and bias is not None:
functional.py(1406):         ret = torch.addmm(bias, input, weight.t())
functional.py(1412):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
models.py(199):         return F.log_softmax(x, dim=1)
 --- modulename: functional, funcname: log_softmax
functional.py(1347):     if dim is None:
functional.py(1349):     if dtype is None:
functional.py(1350):         ret = input.log_softmax(dim)
functional.py(1353):     return ret
module.py(494):         for hook in self._forward_hooks.values():
module.py(500):         if len(self._backward_hooks) > 0:
module.py(513):         return result
cw_div.py(743):     handle.remove()
 --- modulename: hooks, funcname: remove
hooks.py(18):         hooks_dict = self.hooks_dict_ref()
hooks.py(19):         if hooks_dict is not None and self.id in hooks_dict:
hooks.py(20):             del hooks_dict[self.id]
cw_div.py(744):     return torch.stack(outputs)
cw_div.py(758):     if len(layer_activations.size()) == 1:
cw_div.py(760):     elif len(layer_activations.size()) == 2:
cw_div.py(764):         out_norm = (layer_activations / torch.sum(layer_activations)) + 1e-20
cw_div.py(767):     uniform_tensor = torch.ones(out_norm.shape).to(device)
cw_div.py(770):     uni_norm = uniform_tensor / torch.sum(uniform_tensor)
cw_div.py(774):     divergence = F.kl_div(input=uni_norm.log(), target=out_norm, reduction='sum')
 --- modulename: functional, funcname: kl_div
functional.py(1988):     if size_average is not None or reduce is not None:
functional.py(1991):         if reduction == 'mean':
functional.py(1997):         if reduction == 'batchmean':
functional.py(2000):             reduction_enum = _Reduction.get_enum(reduction)
 --- modulename: _reduction, funcname: get_enum
_reduction.py(10):     if reduction == 'none':
_reduction.py(12):     elif reduction == 'mean':
_reduction.py(14):     elif reduction == 'elementwise_mean':
_reduction.py(17):     elif reduction == 'sum':
_reduction.py(18):         ret = 2
_reduction.py(22):     return ret
functional.py(2002):     reduced = torch.kl_div(input, target, reduction_enum)
functional.py(2004):     if reduction == 'batchmean' and input.dim() != 0:
functional.py(2007):     return reduced
cw_div.py(777):     if regularizer_weight is None:
cw_div.py(780):     if divergence < 0:
cw_div.py(787):     return regularizer_weight * divergence
cw_div.py(555):             target_activ = torch.sum(targets_oh * pert_outputs, 1)
cw_div.py(556):             maxother_activ = torch.max(((1 - targets_oh) * pert_outputs - targets_oh * 1e4), 1)[0]
 --- modulename: tensor, funcname: __rsub__
tensor.py(371):         return _C._VariableFunctions.rsub(self, other)
cw_div.py(558):             if targeted:
cw_div.py(563):                 f = torch.clamp(target_activ - maxother_activ + confidence, min=0.0)
cw_div.py(565):             cw_loss = torch.sum(scale_consts * f)
cw_div.py(566):             L2_loss = torch.sum(pert_norms)
cw_div.py(568):             batch_loss = cw_loss + L2_loss + div_reg
cw_div.py(571):             optimizer.zero_grad()
 --- modulename: optimizer, funcname: zero_grad
optimizer.py(160):         for group in self.param_groups:
optimizer.py(161):             for p in group['params']:
optimizer.py(162):                 if p.grad is not None:
optimizer.py(163):                     p.grad.detach_()
optimizer.py(164):                     p.grad.zero_()
optimizer.py(161):             for p in group['params']:
optimizer.py(160):         for group in self.param_groups:
cw_div.py(572):             batch_loss.backward()
 --- modulename: tensor, funcname: backward
tensor.py(107):         torch.autograd.backward(self, gradient, retain_graph, create_graph)
 --- modulename: __init__, funcname: backward
__init__.py(69):     if grad_variables is not None:
__init__.py(78):     tensors = (tensors,) if isinstance(tensors, torch.Tensor) else tuple(tensors)
__init__.py(80):     if grad_tensors is None:
__init__.py(81):         grad_tensors = [None] * len(tensors)
__init__.py(87):     grad_tensors = _make_grads(tensors, grad_tensors)
 --- modulename: __init__, funcname: _make_grads
__init__.py(21):     new_grads = []
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(23):         if isinstance(grad, torch.Tensor):
__init__.py(25):         elif grad is None:
__init__.py(26):             if out.requires_grad:
__init__.py(27):                 if out.numel() != 1:
__init__.py(29):                 new_grads.append(torch.ones_like(out))
__init__.py(22):     for out, grad in zip(outputs, grads):
__init__.py(35):     return tuple(new_grads)
__init__.py(88):     if retain_graph is None:
__init__.py(89):         retain_graph = create_graph
__init__.py(91):     Variable._execution_engine.run_backward(
__init__.py(92):         tensors, grad_tensors, retain_graph, create_graph,
__init__.py(93):         allow_unreachable=True)  # allow_unreachable flag
cw_div.py(573):             optimizer.step()
 --- modulename: adam, funcname: step
adam.py(56):         loss = None
adam.py(57):         if closure is not None:
adam.py(60):         for group in self.param_groups:
adam.py(61):             for p in group['params']:
adam.py(62):                 if p.grad is None:
adam.py(64):                 grad = p.grad.data
adam.py(65):                 if grad.is_sparse:
adam.py(67):                 amsgrad = group['amsgrad']
adam.py(69):                 state = self.state[p]
 --- modulename: tensor, funcname: __hash__
tensor.py(439):         return id(self)
adam.py(72):                 if len(state) == 0:
adam.py(82):                 exp_avg, exp_avg_sq = state['exp_avg'], state['exp_avg_sq']
adam.py(83):                 if amsgrad:
adam.py(85):                 beta1, beta2 = group['betas']
adam.py(87):                 state['step'] += 1
adam.py(89):                 if group['weight_decay'] != 0:
adam.py(93):                 exp_avg.mul_(beta1).add_(1 - beta1, grad)
adam.py(94):                 exp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)
adam.py(95):                 if amsgrad:
adam.py(101):                     denom = exp_avg_sq.sqrt().add_(group['eps'])
adam.py(103):                 bias_correction1 = 1 - beta1 ** state['step']
adam.py(104):                 bias_correction2 = 1 - beta2 ** state['step']
adam.py(105):                 step_size = group['lr'] * math.sqrt(bias_correction2) / bias_correction1
adam.py(107):                 p.data.addcdiv_(-step_size, exp_avg, denom)
adam.py(61):             for p in group['params']:
adam.py(60):         for group in self.param_groups:
adam.py(109):         return loss
cw_div.py(577):             if optim_step % log_frequency == 0:
cw_div.py(580):             if abort_early and not optim_step % (max_steps // 10):
cw_div.py(588):             pert_predictions = torch.argmax(pert_outputs, dim=1)
cw_div.py(589):             comp_pert_predictions = torch.argmax(compensate_confidence(pert_outputs, targets, targeted, confidence), dim=1)
 --- modulename: cw_div, funcname: compensate_confidence
cw_div.py(686):     outputs_comp = outputs.clone()
cw_div.py(687):     rng = torch.range(start=0, end=targets.shape[0]-1, dtype=torch.long)
cw_div.py(689):     if targeted:
cw_div.py(699):         outputs_comp[rng, targets] += confidence
cw_div.py(700):     return outputs_comp
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(599):                         best_l2[i] = l2
cw_div.py(600):                         best_l2_ppred[i] = ppred
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(602):                         o_best_l2[i] = l2
cw_div.py(603):                         o_best_l2_ppred[i] = ppred
cw_div.py(604):                         o_best_adversaries[i] = ax
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(590):             for i in range(batch_size):
cw_div.py(591):                 l2 = pert_norms[i]
cw_div.py(592):                 cppred = comp_pert_predictions[i]
cw_div.py(593):                 ppred = pert_predictions[i]
cw_div.py(594):                 tlabel = targets[i]
cw_div.py(595):                 ax = adversaries[i]
cw_div.py(596):                 if attack_successful(cppred, tlabel, targeted):
 --- modulename: cw_div, funcname: attack_successful
cw_div.py(706):     if targeted:
cw_div.py(709):         return prediction != target
cw_div.py(597):                     assert cppred == ppred
cw_div.py(598):                     if l2 < best_l2[i]:
cw_div.py(601):                     if l2 < o_best_l2[i]:
cw_div.py(590):             for i in range(batch_size):
cw_div.py(543):         for optim_step in range(max_steps):
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(621):                 if scale_consts[i] > lower_bounds[i]:
cw_div.py(622):                     lower_bounds[i] = scale_consts[i]
cw_div.py(623):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(626):                     scale_consts[i] *= 10
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(608):             tlabel = targets[i]
cw_div.py(609):             if best_l2_ppred[i] != -1:
cw_div.py(611):                 if scale_consts[i] < upper_bounds[i]:
cw_div.py(612):                     upper_bounds[i] = scale_consts[i]
cw_div.py(616):                 if upper_bounds[i] < c_range[1] * 0.1:
cw_div.py(617):                     scale_consts[i] = (lower_bounds[i] + upper_bounds[i]) / 2
cw_div.py(607):         for i in range(batch_size):
cw_div.py(528):     for const_step in range(search_steps):
cw_div.py(530):         print('Step', const_step)
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(41):         self.__convertor.write(text)
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(161):         if self.strip or self.convert:
ansitowin32.py(162):             self.write_and_convert(text)
 --- modulename: ansitowin32, funcname: write_and_convert
ansitowin32.py(183):         cursor = 0
ansitowin32.py(184):         text = self.convert_osc(text)
 --- modulename: ansitowin32, funcname: convert_osc
ansitowin32.py(246):         for match in self.ANSI_OSC_RE.finditer(text):
ansitowin32.py(257):         return text
ansitowin32.py(185):         for match in self.ANSI_CSI_RE.finditer(text):
ansitowin32.py(190):         self.write_plain_text(text, cursor, len(text))
 --- modulename: ansitowin32, funcname: write_plain_text
ansitowin32.py(194):         if start < end:
ansitowin32.py(195):             self.wrapped.write(text[start:end])
Stepansitowin32.py(196):             self.wrapped.flush()
ansitowin32.py(166):         if self.autoreset:
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(41):         self.__convertor.write(text)
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(161):         if self.strip or self.convert:
ansitowin32.py(162):             self.write_and_convert(text)
 --- modulename: ansitowin32, funcname: write_and_convert
ansitowin32.py(183):         cursor = 0
ansitowin32.py(184):         text = self.convert_osc(text)
 --- modulename: ansitowin32, funcname: convert_osc
ansitowin32.py(246):         for match in self.ANSI_OSC_RE.finditer(text):
ansitowin32.py(257):         return text
ansitowin32.py(185):         for match in self.ANSI_CSI_RE.finditer(text):
ansitowin32.py(190):         self.write_plain_text(text, cursor, len(text))
 --- modulename: ansitowin32, funcname: write_plain_text
ansitowin32.py(194):         if start < end:
ansitowin32.py(195):             self.wrapped.write(text[start:end])
 ansitowin32.py(196):             self.wrapped.flush()
ansitowin32.py(166):         if self.autoreset:
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(41):         self.__convertor.write(text)
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(161):         if self.strip or self.convert:
ansitowin32.py(162):             self.write_and_convert(text)
 --- modulename: ansitowin32, funcname: write_and_convert
ansitowin32.py(183):         cursor = 0
ansitowin32.py(184):         text = self.convert_osc(text)
 --- modulename: ansitowin32, funcname: convert_osc
ansitowin32.py(246):         for match in self.ANSI_OSC_RE.finditer(text):
ansitowin32.py(257):         return text
ansitowin32.py(185):         for match in self.ANSI_CSI_RE.finditer(text):
ansitowin32.py(190):         self.write_plain_text(text, cursor, len(text))
 --- modulename: ansitowin32, funcname: write_plain_text
ansitowin32.py(194):         if start < end:
ansitowin32.py(195):             self.wrapped.write(text[start:end])
4ansitowin32.py(196):             self.wrapped.flush()
ansitowin32.py(166):         if self.autoreset:
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(41):         self.__convertor.write(text)
 --- modulename: ansitowin32, funcname: write
ansitowin32.py(161):         if self.strip or self.convert:
ansitowin32.py(162):             self.write_and_convert(text)
 --- modulename: ansitowin32, funcname: write_and_convert
ansitowin32.py(183):         cursor = 0
ansitowin32.py(184):         text = self.convert_osc(text)
 --- modulename: ansitowin32, funcname: convert_osc
ansitowin32.py(246):         for match in self.ANSI_OSC_RE.finditer(text):
ansitowin32.py(257):         return text
ansitowin32.py(185):         for match in self.ANSI_CSI_RE.finditer(text):
ansitowin32.py(190):         self.write_plain_text(text, cursor, len(text))
 --- modulename: ansitowin32, funcname: write_plain_text
ansitowin32.py(194):         if start < end:
ansitowin32.py(195):             self.wrapped.write(text[start:end])

ansitowin32.py(196):             self.wrapped.flush()
ansitowin32.py(166):         if self.autoreset:
cw_div.py(533):         best_l2 = torch.tensor(np.ones(batch_size) * np.inf, dtype=torch.float, device=device)
 --- modulename: numeric, funcname: ones
numeric.py(223):     a = empty(shape, dtype, order)
numeric.py(224):     multiarray.copyto(a, 1, casting='unsafe')
numeric.py(225):     return a

(summer19_research) C:\Users\Fabrice\Dropbox\UCLA\research\19 Summer\diversity attacks\cw attack>